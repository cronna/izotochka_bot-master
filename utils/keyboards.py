from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from utils.models import Services, Category,Users, St_per, Stud
from utils.states import Registration
from aiogram.types import InlineKeyboardButton, WebAppInfo
from yookassa import  Payment
from aiogram.types import CallbackQuery



def back_btn(callback):
    return InlineKeyboardBuilder().button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=callback).as_markup()


# utils/keyboards.py
def main_menu(is_admin: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üéì –ó–∞–Ω—è—Ç–∏—è', callback_data='show_categories')
    builder.button(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    
    if is_admin:
        builder.button(text='üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞', callback_data='admin')  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        
    builder.button(text='üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='history')
    return builder.adjust(1).as_markup()


def add_stud() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞', callback_data='add_st')
    builder.button(text='–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ', callback_data='show_categories')
    return builder.as_markup()

def categories_kb(categories: list[Category]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(text=category.sname, callback_data=f'show_category_info_{category.id}')
    builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='start')
    return builder.adjust(2).as_markup()


def services_kb(services: list[Services], columns: int = 2) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    for service in services:
        builder.button(text=f'{service.name} - {service.price}—Ä', callback_data=f'show_service_info {service.id}')
    
    builder.adjust(columns)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (2)
    builder.row(InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_show_categories'))
    return builder.as_markup()


# def user_show_service_kb(service: Services) -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     builder.button(text='üõí –û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f'buy {service.id}')
#     builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='start')
#     return builder.adjust(1).as_markup()

def user_show_service_kb(service: Services, user_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    user = Users.get_or_none(Users.user_id == user_id)
    
    if user:
        st_per = St_per.select().where(St_per.id_per == user.id)
        for stp in st_per:
            stud = Stud.get_or_none(Stud.id == stp.id_st)
            if stud and not stud.is_del:
                builder.button(text=stud.fullname, callback_data=f'buy {service.id} {stud.id}')
    
    builder.button(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞', callback_data=f'addst {service.id}')
    builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_start')
    return builder.adjust(2).as_markup()


# def user_show_service_kb(service: Services) -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     builder.button(text='üõí –û–ø–ª–∞—Ç–∏—Ç—å', callback_data=f'buy {service.id}')
#     builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='start')
#     return builder.adjust(1).as_markup()

def user_show_pay_kb(payment1: Payment) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üõí –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã', callback_data='conf', url=payment1.confirmation.confirmation_url)
    builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='start')
    return builder.adjust(1).as_markup()

 
def history_kb(students: list[Stud]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for student in students:
        text = student.fullname
        if student.is_del:
            text += " (—É–¥–∞–ª–µ–Ω)"
        builder.button(text=text, callback_data=f'hist_{student.id}')
    builder.button(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='start')
    return builder.adjust(1).as_markup()

def profile_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data='edit_profile')
    builder.button(text='üë®üéì –£—á–µ–Ω–∏–∫–∏ –∏ –∑–∞–Ω—è—Ç–∏—è', callback_data='student_courses')
    builder.button(text='üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='history')
    builder.button(text='‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='start')
    return builder.adjust(1).as_markup()

def edit_profile_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –§–ò–û", callback_data="edit_fullname")
    builder.button(text="üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")
    builder.button(text="üìß Email", callback_data="edit_email")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="profile")
    return builder.adjust(2).as_markup()

def admin_menu_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text='üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏', callback_data='manage_categories')
    builder.button(text='üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏', callback_data='manage_services')
    builder.button(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
    builder.button(text='üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', callback_data='export_data')
    builder.button(text='üì®–†–∞—Å—Å—ã–ª–∫–∞', callback_data='broadcast')
    builder.button(text='üë®‚Äçü¶∞–ê–¥–º–∏–Ω—ã', callback_data='manage_admins')
    builder.button(text='‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data='start')
    return builder.adjust(1).as_markup()


def pagination_kb(current_page: int, total_pages: int, prefix: str = "page_") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    :param current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    :param prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if current_page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{prefix}{current_page - 1}")
    
    # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    builder.button(text=f"{current_page}/{total_pages}", callback_data="current_page")
    
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
    if current_page < total_pages:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{prefix}{current_page + 1}")
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    builder.button(text="‚Ü©Ô∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start")
    
    return builder.adjust(2, 1).as_markup()

def history_kb(students: list[Stud]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π.
    
    :param students: –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()
    for student in students:
        text = student.fullname
        if student.is_del:
            text += " (—É–¥–∞–ª–µ–Ω)"
        builder.button(text=text, callback_data=f"hist_{student.id}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="start")
    return builder.adjust(1).as_markup()

def edit_student_kb(student_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–∞.
    
    :param student_id: ID —É—á–µ–Ω–∏–∫–∞
    :return: InlineKeyboardMarkup
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_st_fullname_{student_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data=f"delete_student_{student_id}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="profile")
    return builder.adjust(1).as_markup()

def profile_kb() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
    builder.button(text="üë®üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏", callback_data="manage_students")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="start")
    return builder.adjust(1).as_markup()

def manage_students_kb(students: list[Stud]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for student in students:
        text = student.fullname
        if student.is_del:
            text += " (—É–¥–∞–ª–µ–Ω)"
        builder.button(text=text, callback_data=f"edit_student_{student.id}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="add_student")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="profile")
    return builder.adjust(1).as_markup()



def back_to_profile_kb():
    return InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="profile").as_markup()

def back_to_admin_kb():
    return InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin").as_markup()

def categories_manage_kb(categories: list[Category]):
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=f"{cat.name} ({cat.id})", callback_data=f"edit_cat_{cat.id}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin")
    return builder.adjust(1).as_markup()

def edit_category_kb(category_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"update_cat_name_{category_id}")
    builder.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ", callback_data=f"update_cat_sname_{category_id}")
    builder.button(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"update_cat_photo_{category_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"delete_cat_{category_id}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="manage_categories")
    return builder.adjust(1).as_markup()

def services_manage_kb(services: list[Services]):
    builder = InlineKeyboardBuilder()
    for srv in services:
        builder.button(text=f"{srv.name} - {srv.price}—Ä", callback_data=f"edit_srv_{srv.id}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_service")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin")
    return builder.adjust(1).as_markup()


def edit_service_kb(service_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"update_srv_name_{service_id}")
    builder.button(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"update_srv_price_{service_id}")
    builder.button(text="üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"update_srv_category_{service_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data=f"delete_srv_{service_id}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="manage_services")
    return builder.adjust(1).as_markup()

def services_manage_kb(page: int = 1, per_page: int = 3) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    query = Category.select().where(Category.is_del == 0).order_by(Category.sortkey)
    total_items = query.count()
    total_pages = (total_items + per_page - 1) // per_page
    categories = query.paginate(page, per_page)

    for category in categories:
        builder.button(
            text=f"üìÇ {category.name}",
            callback_data=f"category_{category.id}"
        )
        
        services = Services.select().where(
            (Services.category == category) &
            (Services.is_del == 0)
        ).order_by(Services.sortkey)
        
        for service in services:
            builder.button(
                text=f"‚Üí {service.name} ({service.price}—Ä)", 
                callback_data=f"edit_srv_{service.id}"
            ).adjust(1)

    if total_pages > 1:
        pagination_buttons = []
        if page > 1:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è", 
                callback_data=f"serv_page_{page-1}"
            ))
        
        pagination_buttons.append(InlineKeyboardButton(
            text=f"{page}/{total_pages}", 
            callback_data="current_page"
        ))
        
        if page < total_pages:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è", 
                callback_data=f"serv_page_{page+1}"
            ))
        
        builder.row(*pagination_buttons)

    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É",
            callback_data="add_service"
        ),
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="admin"
        )
    )
    
    return builder.as_markup()

def back_to_admin_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.
    """
    return InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin").as_markup()

def export_data_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (TXT)", callback_data="export_users_txt")
    builder.button(text="üìù –ü–ª–∞—Ç–µ–∂–∏ (TXT)", callback_data="export_payments_txt")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin")
    return builder.adjust(1).as_markup()


def student_actions_kb(student_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_student_{student_id}")
    builder.button(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data=f"add_course_{student_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data=f"delete_student_{student_id}")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="profile")
    return builder.adjust(1).as_markup()


def categories_manage_kb(categories: list[Category]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=f"{cat.name} ({cat.id})", callback_data=f"edit_cat_{cat.id}")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_category")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin")
    return builder.adjust(3).as_markup()


def categories_select_kb(categories: list[Category]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat.name, callback_data=f"select_cat_{cat.id}")
    builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin")
    builder.adjust(2)
    return builder.as_markup()