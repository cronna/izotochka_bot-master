from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, FSInputFile, PhotoSize
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from utils.models import AdminUsers, Users, Services, Category, PaymentsT, Stud, St_per
from utils.states import AdminStates
from datetime import datetime
from aiogram.types.input_file import BufferedInputFile
import csv
from utils.keyboards import (
    admin_menu_kb,
    categories_manage_kb,
    services_manage_kb,
    back_to_admin_kb,
    edit_service_kb, 
    edit_category_kb
)

admin_router = Router()

async def check_admin(user_id: int) -> bool:
    return Users.select().where(Users.user_id == user_id, Users.is_admin == 1).exists()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
@admin_router.callback_query(F.data == "admin")
async def admin_panel(callback: CallbackQuery):
    if not await check_admin(callback.from_user.id):
        return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
    
    await callback.message.edit_text(
        "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_menu_kb()
    )

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@admin_router.callback_query(F.data == "manage_categories")
async def manage_categories(callback: CallbackQuery):
    categories = Category.select()
    await callback.message.edit_text(
        "üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:",
        reply_markup=categories_manage_kb(categories)
    )

@admin_router.callback_query(F.data == "add_category")
async def add_category(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.add_category_name)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.add_category_name)
async def process_add_category_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdminStates.add_category_photo)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

@admin_router.message(AdminStates.add_category_photo)
async def process_add_category_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    
    if message.photo:
        data["image"] = message.photo[-1].file_id
    elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        data["image"] = None
    
    Category.create(
        name=data["name"],
        sname=data.get("sname", data["name"][:15]),
        image=data.get("image")
    )
    
    await state.clear()
    await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_kb())

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏
@admin_router.callback_query(F.data == "manage_services")
async def manage_services(callback: CallbackQuery):
    services = Services.select().join(Category)
    await callback.message.edit_text(
        "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏:",
        reply_markup=services_manage_kb(services)
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
@admin_router.callback_query(F.data == "add_service")
async def add_service(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.add_service_name)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.add_service_name)
async def process_add_service_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdminStates.add_service_price)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:")

# admin.py
@admin_router.message(AdminStates.add_service_price)
async def process_add_service_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        categories = Category.select()
        builder = InlineKeyboardBuilder()
        for cat in categories:
            builder.button(text=cat.name, callback_data=f"select_cat_{cat.id}")
        builder.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="admin")
        builder.adjust(2)
        
        await state.set_state(AdminStates.add_service_category)
        await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
        
    except ValueError:
        await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@admin_router.callback_query(F.data.startswith("select_cat_"))
async def process_select_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[2])
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.add_service_description)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")

@admin_router.message(AdminStates.add_service_description)
async def process_add_service_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.add_service_photo)
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É—Å–ª—É–≥–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

# admin.py
@admin_router.message(AdminStates.add_service_photo)
async def process_add_service_without_photo(message: Message, state: FSMContext):
    if message.photo:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        data["image"] = photo_id
        
        Services.create(**data)
        await state.clear()
        await message.answer("‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Ñ–æ—Ç–æ!", reply_markup=admin_menu_kb())
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        data = await state.get_data()
        Services.create(**data)
        await state.clear()
        await message.answer("‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ!", reply_markup=admin_menu_kb())

    

    

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
@admin_router.callback_query(F.data.startswith("edit_srv_"))
async def edit_service_start(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[2])
    service = Services.get_by_id(service_id)
    await state.update_data(service_id=service_id)
    await state.set_state(AdminStates.edit_service)
    await callback.message.edit_text(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service.name}\n"
        f"–¶–µ–Ω–∞: {service.price}—Ä\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service.category.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {service.description}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=edit_service_kb(service_id)
    )

@admin_router.callback_query(F.data.startswith("update_srv_"))
async def update_service_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[2]
    await state.update_data(field=field)
    await state.set_state(AdminStates.edit_service_value)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.edit_service_value)
async def process_update_service(message: Message, state: FSMContext):
    data = await state.get_data()
    service_id = data["service_id"]
    field = data["field"]
    service = Services.get_by_id(service_id)
    
    if field == "name":
        service.name = message.text
    elif field == "price":
        service.price = int(message.text)
    elif field == "category":
        service.category = Category.get_by_id(int(message.text))
    elif field == "description":
        service.description = message.text
    
    service.save()
    await state.clear()
    await message.answer("‚úÖ –£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_kb())

@admin_router.callback_query(F.data.startswith("delete_srv_"))
async def delete_service(callback: CallbackQuery):
    service_id = int(callback.data.split("_")[2])
    service = Services.get_by_id(service_id)
    service.delete_instance()
    await callback.message.edit_text(
        "‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=admin_menu_kb()
    )

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ TXT
@admin_router.callback_query(F.data == "export_users_txt")
async def export_users_txt(callback: CallbackQuery):
    try:
        with open("users.txt", "w", encoding="utf-8") as file:
            users = Users.select()
            for user in users:
                file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.fullname}\n")
                file.write(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n")
                file.write(f"Email: {user.email}\n")
                
                students = Stud.select().join(St_per).where(St_per.id_per == user.id)
                if students:
                    file.write("–î–µ—Ç–∏:\n")
                    for student in students:
                        file.write(f" - {student.fullname}\n")
                file.write("\n" + "="*50 + "\n")
        
        await callback.message.answer_document(BufferedInputFile.from_file("users.txt", filename="users.txt"))
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@admin_router.callback_query(F.data == "export_payments_txt")
async def export_payments_txt(callback: CallbackQuery):
    try:
        with open("payments.txt", "w", encoding="utf-8") as file:
            payments = PaymentsT.select()
            for p in payments:
                file.write(f"–ü–ª–∞—Ç–µ–∂ #{p.id}\n")
                file.write(f"–î–∞—Ç–∞: {p.payment_date.strftime('%Y-%m-%d')}\n")
                file.write(f"–°—É–º–º–∞: {p.price} —Ä—É–±.\n")
                file.write(f"–£—Å–ª—É–≥–∞: {p.service.name}\n")
                file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {p.user.fullname}\n")
                file.write("\n" + "-"*50 + "\n")
        
        await callback.message.answer_document(BufferedInputFile.from_file("payments.txt", filename="payments.txt"))
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –†–∞—Å—Å—ã–ª–∫–∞
@admin_router.callback_query(F.data == "broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.broadcast_message)
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    users = Users.select()
    success = 0
    failed = 0
    
    for user in users:
        try:
            await message.bot.send_message(
                chat_id=user.user_id,
                text=message.text
            )
            success += 1
        except:
            failed += 1
    
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
        reply_markup=admin_menu_kb()
    )
    await state.clear()

@admin_router.callback_query(F.data == "stats")
async def stats_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await state.set_state(AdminStates.stats_period)
    await callback.message.edit_text(
        "üìä –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î\n"
        "–ü—Ä–∏–º–µ—Ä: 2024-01-01 2024-12-31",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.stats_period)
async def process_stats(message: Message, state: FSMContext):
    try:
        start_date_str, end_date_str = message.text.split()
        start_date = datetime.strptime(start_date_str, "%Y-%m-%d")
        end_date = datetime.strptime(end_date_str, "%Y-%m-%d")
        
        payments = PaymentsT.select().where(
            (PaymentsT.payment_date >= start_date) &
            (PaymentsT.payment_date <= end_date)
        )
        
        total_amount = sum(p.price for p in payments)
        total_count = payments.count()
        
        await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.date()} - {end_date.date()}:\n\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount}—Ä\n"
            f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_count}",
            reply_markup=admin_menu_kb()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü—Ä–∏–º–µ—Ä: 2024-01-01 2024-12-31")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


@admin_router.callback_query(F.data == "export_data")
@admin_router.callback_query(F.data == "export_data")
async def export_data_menu(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
    """
    await callback.message.edit_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=InlineKeyboardBuilder()
            .button(text="üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users")
            .button(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="export_payments")
            .button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin")
            .adjust(1)
            .as_markup()
    )

@admin_router.callback_query(F.data == "export_users")
async def export_users(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV.
    """
    try:
        users = Users.select()
        with open("users.csv", "w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"])
            for user in users:
                writer.writerow([user.id, user.fullname, user.phone_number, user.email])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer_document(FSInputFile("users.csv"))
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@admin_router.callback_query(F.data == "export_payments")
async def export_payments(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ CSV.
    """
    try:
        payments = PaymentsT.select()
        with open("payments.csv", "w", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–£—Å–ª—É–≥–∞", "–¶–µ–Ω–∞", "–î–∞—Ç–∞"])
            for payment in payments:
                writer.writerow([
                    payment.id,
                    payment.user.fullname,
                    payment.service.name,
                    payment.price,
                    payment.payment_date.strftime("%Y-%m-%d")
                ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer_document(FSInputFile("payments.csv"))
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_router.callback_query(F.data == "manage_admins")
async def manage_admins(callback: CallbackQuery):
    admins = Users.select().where(Users.is_admin == 1)
    builder = InlineKeyboardBuilder()
    
    for admin in admins:
        user = Users.get(user_id=admin.user_id)
        builder.button(text=f"{user.fullname} ({admin.user_id})", 
                      callback_data=f"admin_info_{admin.user_id}")
    
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )

@admin_router.callback_query(F.data.startswith("add_admin"))
async def add_admin_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.add_admin)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.add_admin)
async def process_add_admin(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        AdminUsers.create(user_id=user_id)
        await message.answer("‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await state.clear()


@admin_router.callback_query(F.data.startswith("edit_cat_"))
async def edit_category_handler(callback: CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[2])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–Ω–¥–µ–∫—Å
        category = Category.get_by_id(category_id)
        await state.update_data(category_id=category_id)
        await state.set_state(AdminStates.edit_category)
        
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {category.name}\n"
            f"–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {category.sname}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=edit_category_kb(category_id)  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        )
    except (IndexError, Category.DoesNotExist):
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

@admin_router.callback_query(F.data.startswith("update_cat_name_"))
async def update_category_name_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.edit_category_name)
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.edit_category_name)
async def process_update_category_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    data = await state.get_data()
    category_id = data["category_id"]
    category = Category.get_by_id(category_id)
    category.name = message.text
    category.save()
    
    await state.clear()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=admin_menu_kb())

@admin_router.callback_query(F.data.startswith("update_cat_sname_"))
async def update_category_sname_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.edit_category_sname)
    await callback.message.edit_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.edit_category_sname)
async def process_update_category_sname(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    data = await state.get_data()
    category_id = data["category_id"]
    category = Category.get_by_id(category_id)
    category.sname = message.text
    category.save()
    
    await state.clear()
    await message.answer("‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=admin_menu_kb())

@admin_router.callback_query(F.data.startswith("delete_cat_"))
async def delete_category_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    """
    category_id = int(callback.data.split("_")[2])
    category = Category.get_by_id(category_id)
    category.delete_instance()
    
    await callback.message.edit_text(
        "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=admin_menu_kb()
    )


@admin_router.callback_query(F.data.startswith("update_cat_photo_"))
async def update_category_photo_handler(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[3])
    await state.update_data(category_id=category_id)
    await state.set_state(AdminStates.edit_category_photo)
    await callback.message.edit_text(
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=back_to_admin_kb()
    )

@admin_router.message(AdminStates.edit_category_photo)
async def process_update_category_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    category_id = data["category_id"]
    category = Category.get_by_id(category_id)
    
    if message.photo:
        category.image = message.photo[-1].file_id
    elif message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        category.image = None
    
    category.save()
    await state.clear()
    await message.answer("‚úÖ –§–æ—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=admin_menu_kb())