from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from utils.keyboards import services_kb, categories_kb, user_show_service_kb, InlineKeyboardBuilder, main_menu
from utils.models import Services, Category, Stud, St_per,Users, StudentCourses
from utils.states import Registration
from datetime import datetime

user_services_router = Router()


@user_services_router.callback_query(F.data == 'show_categories')
async def show_categories_handler(callback: CallbackQuery):
    categories = Category.select().where(Category.is_del == 0).order_by(Category.sortkey)
    

    text = f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ: </b>"
    await callback.message.answer(
        text,
        reply_markup=categories_kb(categories),
        parse_mode="HTML"
    )

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π
@user_services_router.callback_query(F.data.startswith('show_category_info_'))
async def show_services_handler(callback: CallbackQuery):
    try:
        category_id = int(callback.data.split('_')[3])
        category = Category.get_by_id(category_id)
        services = Services.select().where(
            (Services.category == category_id) &
            (Services.is_del == 0)
        ).order_by(+Services.sortkey)

        text = f"<b>{category.name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:"

        if category.image:
            await callback.message.answer_photo(
                category.image,
                caption=text,
                reply_markup=services_kb(services, 2),  # –ü–µ—Ä–µ–¥–∞–µ–º 2 –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                text,
                reply_markup=services_kb(services, 2),  # –ü–µ—Ä–µ–¥–∞–µ–º 2 –¥–ª—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
                parse_mode="HTML"
            )
    except (IndexError, ValueError, Category.DoesNotExist) as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    

@user_services_router.callback_query(F.data.startswith('show_service_info'))
async def show_service_info_handler(callback: CallbackQuery):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        data_parts = callback.data.split()
        if len(data_parts) < 2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —É—Å–ª—É–≥–∏
        service_id = int(data_parts[1])
        service = Services.get(Services.id == service_id)
        user_id = callback.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"""<b>{service.name}</b>
–¶–µ–Ω–∞: {service.price}‚ÇΩ
{service.description or ''}"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º
        if service.image:
            await callback.message.answer_photo(
                service.image,
                text,
                reply_markup=user_show_service_kb(service, user_id),
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                text,
                reply_markup=user_show_service_kb(service, user_id),
                parse_mode="HTML"
            )
    
    except Services.DoesNotExist:
        await callback.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except ValueError:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—Å–ª—É–≥–∏.")
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@user_services_router.message(Registration.input_stfullname)
async def input_fullname_handler(message: Message, state: FSMContext):
    if len(message.text.split()) != 3:
        return await message.answer('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ')
    fullname = ' '.join(list(map(lambda x: x.capitalize(), message.text.split())))
    data = await state.get_data()
    pp=data['servs']
  
    newst=Stud.create(fullname=fullname, id_crm=0)
   
    St_per.create(id_st= str(newst.id),id_per=str(Users.get(Users.user_id==message.from_user.id)))
    # St_per.create(id_st=7 ,id_per= 7)
       
    service: Services = Services.get_by_id(int(data['servs'])) 
    us=message.from_user.id
    text = f'''–í—ã –≤—ã–±—Ä–∞–ª–∏
 <b>{service.category.name}</b> <b>{service.name}</b>
 <i>–°—Ç–æ–∏–º–æ—Å—Ç—å: {service.price}‚ÇΩ</i>

 <b>–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–æ–º–Ω–∏–ª –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ</b>'''
    
    await state.clear()
    await message.answer (text, reply_markup=user_show_service_kb(service, us), parse_mode="HTML")


@user_services_router.callback_query(F.data.startswith("add_to_course_"))
async def add_to_course_handler(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split("_")[3])
    user = Users.get(user_id=callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    students = Stud.select().join(St_per).where(
        (St_per.id_per == user) &
        (Stud.is_del == False)
    )
    
    builder = InlineKeyboardBuilder()
    for student in students:
        builder.button(text=student.fullname, callback_data=f"select_student_{service_id}_{student.id}")
    
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"show_service_info_{service_id}")
    await callback.message.edit_text(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=builder.adjust(1).as_markup()
    )

@user_services_router.callback_query(F.data.startswith("select_student_"))
async def process_add_to_course(callback: CallbackQuery):
    service_id = int(callback.data.split("_")[2])
    student_id = int(callback.data.split("_")[3])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞
    if not Stud.select().where(Stud.id == student_id).exists():
        return await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∫—É—Ä—Å
    StudentCourses.create(
        student=student_id,
        service=service_id,
        start_date=datetime.now(),
        is_active=True
    )
    
    await callback.message.edit_text(
        "‚úÖ –£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!",
        reply_mup=main_menu()
    )
    
# @user_services_router.callback_query(F.data.split()[0] == 'show_service_info')
# async def show_service_info_handler(callback: CallbackQuery):
#     service: Services = Services.get_by_id(int(callback.data.split()[1]))
#     text = f'''<b>{service.category.name}</b>
# <b>{service.name}</b>
# <i>–°—Ç–æ–∏–º–æ—Å—Ç—å: {service.price}‚ÇΩ</i>'''
#     # –¢—É—Ç –≤—ã–≤–µ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–æ–≤
#     await callback.message.edit_text(text, reply_markup=user_show_service_kb(service), parse_mode="HTML")



print('hello world')



