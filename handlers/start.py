"""Module using to handle start message or show main menu from back callbacks"""
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from utils.models import Users, AdminUsers
from utils.states import Registration
from utils.keyboards import main_menu

start_router = Router()


@start_router.message(Command('start'))
@start_router.callback_query(F.data == 'start')
async def start_handler(event: Message | CallbackQuery, state: FSMContext = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    user = Users.get_or_none(Users.user_id == event.from_user.id)

    registration_text = f'''üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {event.from_user.full_name}!

–Ø, –ü–∏–∫–∞—Å—Å–æ, –±–æ—Ç —Å—Ç—É–¥–∏–∏ –ò–∑–æ—Ç–æ—á–∫–∞ üë®‚Äçüé®, –ø–æ–º–æ–≥–∞—é –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã!
–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è –í–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é.
–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.'''

    start_text = f'''üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {event.from_user.full_name}!
    
–Ø, –ü–∏–∫–∞—Å—Å–æ, –±–æ—Ç —Å—Ç—É–¥–∏–∏ –ò–∑–æ—Ç–æ—á–∫–∞ üë®‚Äçüé®, –ø–æ–º–æ–≥–∞—é –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã!'''

    if not user:
        print("–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await event.answer(registration_text, parse_mode="HTML")
        await state.set_state(Registration.input_fullname)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        is_admin = Users.select().where(Users.user_id == event.from_user.id, Users.is_admin == 1).exists()
        
        if isinstance(event, Message):
            await event.delete()
            await event.answer(
                start_text,
                reply_markup=main_menu(is_admin),
                parse_mode="HTML"
            )
        else:
            await event.message.answer(
                start_text,
                reply_markup=main_menu(is_admin),
                parse_mode="HTML"
            )